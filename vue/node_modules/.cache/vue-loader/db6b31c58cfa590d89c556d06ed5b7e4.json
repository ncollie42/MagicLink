{"remainingRequest":"/home/Nico/Github/MagicLink/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/Nico/Github/MagicLink/vue/src/views/login.vue?vue&type=style&index=0&id=7589b93f&scoped=true&lang=css&","dependencies":[{"path":"/home/Nico/Github/MagicLink/vue/src/views/login.vue","mtime":1589439814981},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgouY29udGFpbmVySW5uZXIgewogICAgYm94LXNoYWRvdzogMCAwIDMwcHggcmdiKDQ3LCA0MSwgNDIpOwogICAgYm9yZGVyLXJhZGl1czogMTVweDsKICAgIHBhZGRpbmc6IDE1cHg7Cn0K"},{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA","file":"login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"containerInner\">\n        <login_enter v-on:email=\"login\" v-if=\"currentState == State.Idle\"/>\n        <login_waiting v-if=\"currentState == State.Waiting\"/>\n        <p>{{responce}}</p>\n        </div>\n    </div>\n</template>\n\n<style scoped>\n.containerInner {\n    box-shadow: 0 0 30px rgb(47, 41, 42);\n    border-radius: 15px;\n    padding: 15px;\n}\n</style>\n\n<script>\nimport login_enter from \"@/components/login_enter.vue\"\nimport login_waiting from \"@/components/login_waiting.vue\"\nimport { grpc } from \"@improbable-eng/grpc-web\";\nimport { Login } from \"../logingRPC/login_pb_service\"; //service\nimport { loginInfo, jwt } from \"../logingRPC/login_pb\"; //type\nimport router from \"../router\"\nconst State = {\n    Idle: 1,\n    Waiting: 2,\n}\nexport default {\n    name: \"login\",\n    components: {\n        login_enter,\n        login_waiting,\n    },\n    created() {\n        this.isLoggedIn();\n        console.log(\"created now!\")\n    },\n    data() {\n        return {\n            currentState: State.Idle,\n            State,\n            responce:\"\",\n        }\n    },\n    methods: {\n        login(passedEmail) {\n            \n            // e.preventDefault();\n            const sendingEmail = new loginInfo();\n            sendingEmail.setEmail(passedEmail);\n            sendingEmail.setKey(1);\n\n            this.currentState = State.Waiting;\n            grpc.unary(Login.login, {\n                request: sendingEmail,\n                host: this.$hostname,\n                onEnd: res => {\n                    const { status, statusMessage, headers, message, trailers } = res;\n                    if (status === grpc.Code.OK && message) {\n                    // console.log(\"All good it worked: \", message.toObject());\n                        // this.responce = message.toObject().jwt;\n                        localStorage.setItem(\"jwt\", message.toObject().jwt);\n                        router.push({path: '/'})\n                    } else {\n                    console.log(\"status:\", status, statusMessage, headers, message, trailers)\n                        this.responce = \"You're link as expired\\n Try again\"\n                        this.currentState = State.Idle;\n                    }\n                }\n            })\n        },\n        isLoggedIn: function() {\n            let localJWT = localStorage.getItem(\"jwt\")\n\n            const req = new jwt()\n            req.setJwt(localJWT)\n            grpc.unary(Login.isLoggedIn, {\n                request: req,\n                host: this.$hostname,\n                onEnd: res => {\n                    const { status, statusMessage, headers, message, trailers } = res;\n                    if (status === grpc.Code.OK && message) {\n                        console.log(\"We good -> forward elsewhere\")\n                        router.push({path: '/'})\n                    } else {\n                       console.log(\"status:\", status, statusMessage, headers, message, trailers)\n                       console.log(\"Not logged in\")\n\n                    }\n                }\n            })\n        }\n    },\n}\n</script>\n\n\n"]}]}