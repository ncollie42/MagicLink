{"remainingRequest":"/home/Nico/Github/MagicLink/vue/node_modules/babel-loader/lib/index.js!/home/Nico/Github/MagicLink/vue/node_modules/eslint-loader/index.js??ref--13-0!/home/Nico/Github/MagicLink/vue/src/logingRPC/login_pb.js","dependencies":[{"path":"/home/Nico/Github/MagicLink/vue/src/logingRPC/login_pb.js","mtime":1588467123015},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/Nico/Github/MagicLink/vue/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/Nico/Github/MagicLink/vue/src/logingRPC/login_pb.js"],"names":["jspb","require","goog","global","Function","exportSymbol","proto","Login","email","opt_data","Message","initialize","inherits","DEBUG","COMPILED","displayName","jwt","code","tmpReturn","GENERATE_TO_OBJECT","prototype","toObject","opt_includeInstance","includeInstance","msg","f","obj","getFieldWithDefault","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","field","getFieldNumber","value","readString","setEmail","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","undefined","getEmail","length","writeString","setProto3StringField","setJwt","getJwt","setCode","getCode","str","setStr","getStr","object","extend","exports"],"mappings":"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","sourcesContent":["// source: login.proto\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.Login.code', null, global);\ngoog.exportSymbol('proto.Login.email', null, global);\ngoog.exportSymbol('proto.Login.jwt', null, global);\ngoog.exportSymbol('proto.Login.tmpReturn', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Login.email = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Login.email, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Login.email.displayName = 'proto.Login.email';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Login.jwt = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Login.jwt, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Login.jwt.displayName = 'proto.Login.jwt';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Login.code = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Login.code, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Login.code.displayName = 'proto.Login.code';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.Login.tmpReturn = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.Login.tmpReturn, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Login.tmpReturn.displayName = 'proto.Login.tmpReturn';\n}\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Login.email.prototype.toObject = function(opt_includeInstance) {\n  return proto.Login.email.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Login.email} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.email.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    email: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Login.email}\n */\nproto.Login.email.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Login.email;\n  return proto.Login.email.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Login.email} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Login.email}\n */\nproto.Login.email.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setEmail(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Login.email.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Login.email.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Login.email} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.email.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getEmail();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string email = 1;\n * @return {string}\n */\nproto.Login.email.prototype.getEmail = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Login.email} returns this\n */\nproto.Login.email.prototype.setEmail = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Login.jwt.prototype.toObject = function(opt_includeInstance) {\n  return proto.Login.jwt.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Login.jwt} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.jwt.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    jwt: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Login.jwt}\n */\nproto.Login.jwt.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Login.jwt;\n  return proto.Login.jwt.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Login.jwt} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Login.jwt}\n */\nproto.Login.jwt.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setJwt(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Login.jwt.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Login.jwt.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Login.jwt} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.jwt.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getJwt();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string jwt = 1;\n * @return {string}\n */\nproto.Login.jwt.prototype.getJwt = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Login.jwt} returns this\n */\nproto.Login.jwt.prototype.setJwt = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Login.code.prototype.toObject = function(opt_includeInstance) {\n  return proto.Login.code.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Login.code} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.code.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    code: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Login.code}\n */\nproto.Login.code.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Login.code;\n  return proto.Login.code.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Login.code} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Login.code}\n */\nproto.Login.code.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setCode(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Login.code.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Login.code.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Login.code} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.code.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getCode();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string code = 1;\n * @return {string}\n */\nproto.Login.code.prototype.getCode = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Login.code} returns this\n */\nproto.Login.code.prototype.setCode = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\n\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * Optional fields that are not set will be set to undefined.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n *     JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.Login.tmpReturn.prototype.toObject = function(opt_includeInstance) {\n  return proto.Login.tmpReturn.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n *     the JSPB instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.Login.tmpReturn} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.tmpReturn.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    str: jspb.Message.getFieldWithDefault(msg, 1, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Login.tmpReturn}\n */\nproto.Login.tmpReturn.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Login.tmpReturn;\n  return proto.Login.tmpReturn.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Login.tmpReturn} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Login.tmpReturn}\n */\nproto.Login.tmpReturn.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setStr(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.Login.tmpReturn.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.Login.tmpReturn.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Login.tmpReturn} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.Login.tmpReturn.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getStr();\n  if (f.length > 0) {\n    writer.writeString(\n      1,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string str = 1;\n * @return {string}\n */\nproto.Login.tmpReturn.prototype.getStr = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * @param {string} value\n * @return {!proto.Login.tmpReturn} returns this\n */\nproto.Login.tmpReturn.prototype.setStr = function(value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n\n\ngoog.object.extend(exports, proto.Login);\n"]}]}